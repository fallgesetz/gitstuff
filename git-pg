#!/bin/sh
# slurp mmmm

git_change_id ()
{
	git_ref=$1
	change_id=$(git cat-file commit ${git_ref} | grep 'Change-Id:' | sed 's/Change-Id: \([a-z0-9]*\)/\1/')
	return $change_id
}

git_next_commit ()
{
	commit=$1
	next=$(git rev-list $commit..HEAD | tail -n 1)
	return $next
}

git_exists_branch()
{
	branch_name=$1

}

# ugly convenience script to simplify branching with gerrit.
# This will squash all the commits in your branch, and post to gerrit with the # message of the first commit in your branch, without messing with the history of your actual working branch.
git stash save
branch_name=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
gerrit_branch="${branch_name}_gerrit"
# delete the integration branch and then create it.
_=$(git branch -D ${gerrit_branch})
_=$(git checkout -b ${gerrit_branch})
# compute the branching point
merge_base=$(git merge-base HEAD origin/master)
# compute the first branch commit following the branching point
first_branch_commit=$(git next-commit ${merge_base})
# reset all commits on branch
reset=$(git reset --soft ${merge_base})
# commit all commits as one commit using the commit message from the first commit on the branch
commit=$(git commit -c ${first_branch_commit} < `tty` > `tty`)
#TODO: this commit message, if changed, doesn't get reflected. So, we should do some checking to see if the integration branch exists and then branch off of that.
while true; do
    read -p "Post to gerrit? (Y/N)" yn
    case $yn in 
	[Yy]* ) pg; break;;
	[Nn]* ) break;;
	*) echo "Please answer yes or no";;
    esac
done
# return to feature branch
_=$(git checkout ${branch_name})
git stash pop
